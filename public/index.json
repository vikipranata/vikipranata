[{"content":"Preparation I used five VM nodes for this home lab project with 16 Cores 16GB Memory and 40GB for the root disk with systems operation Ubuntu 22.04.5 LTS.\nNode Hostname Node Role vCPU Memory RootDisk ManagementNet StorageNet btnlab01adm01 Ansible 2 Core 2GB 20GB 10.78.78.199 - btnlab01con01 Controller 16 Core 16GB 40GB 10.78.78.201 10.79.79.201 btnlab01con02 Controller 16 Core 16GB 40GB 10.78.78.202 10.79.79.202 btnlab01con03 Controller 16 Core 16GB 40GB 10.78.78.203 10.79.79.203 btnlab01hpv01 Hypervisor 32 Core 32GB 40GB 10.78.78.204 10.79.79.204 btnlab01hpv02 Hypervisor 32 Core 32GB 40GB 10.78.78.205 10.79.79.205 Interface mapping:\neth0 for Public Network eth1 for Management Network eth2 for Storage Network with Jumbo frames eth4 for Tunnel/Self Service/Guest Network with Jumbo frames We can review network configuration in sample-netplan.yaml\nInstalling NFS Server for Glance Service in btnlab01adm01 node\nsudo apt update sudo apt install nfs-kernel-server sudo mkdir -p /data sudo chown nobody:nogroup /data echo \u0026#34;/data *(rw,sync,no_subtree_check)\u0026#34; \u0026gt;\u0026gt; /etc/exports sudo systemctl restart nfs-kernel-server sudo exportfs -v Execute in all nodes\nMapping static hostname in /etc/hosts\ncat \u0026lt;\u0026lt;EOF | tee -a /etc/hosts 10.78.78.199 btnlab01adm01 btnlab01adm01.homelab.is-a.dev 10.78.78.201 btnlab01con01 btnlab01con01.homelab.is-a.dev 10.78.78.202 btnlab01con02 btnlab01con02.homelab.is-a.dev 10.78.78.203 btnlab01con02 btnlab01con03.homelab.is-a.dev 10.78.78.204 btnlab01hpv01 btnlab01hpv01.homelab.is-a.dev 10.78.78.205 btnlab01hpv02 btnlab01hpv02.homelab.is-a.dev 10.78.78.200 os-int 10.78.78.100 os-ext EOF Install packages and dependencies\nsudo apt install -y git gcc libssl-dev libffi-dev \\ python3-venv python3-dev python3-selinux python3-setuptools \\ python3-pip python3-docker nfs-common Mount nfs volume for all node\nsudo mkdir /data cat \u0026lt;\u0026lt;EOF | sudo tee -a /etc/fstab 10.78.78.199:/data /data nfs defaults,_netdev 0 0 EOF sudo mount /data Create virtual environment for kolla-ansible\npython3 -m venv kolla-venv cd kolla-venv source bin/activate pwd Update pip and install ansible\npip install -U pip pip install \u0026#39;ansible\u0026gt;=8,\u0026lt;9\u0026#39; Update ansible config in current directory\ntee $PWD/ansible.cfg \u0026lt;\u0026lt;EOF [defaults] host_key_checking=False pipelining=True forks=100 log_path = $PWD/ansible.log EOF Installing kolla-ansible stable with version 2024.1\npip install git+https://opendev.org/Openstack/kolla-ansible@stable/2024.1 kolla-ansible install-deps Create directory for kolla configuration\nsudo mkdir -p /etc/kolla /etc/kolla/config/nova \\ /etc/kolla/config/cinder/{cinder-volume,cinder-backup} sudo chown $USER:$USER /etc/kolla Copy ceph keyring into nova and cinder config directory that we created earlier in the Ceph Reef Deployment post.\nsudo mkdir -p /etc/kolla /etc/kolla/config/nova \\ /etc/kolla/config/cinder/{cinder-volume,cinder-backup} cp -r ceph.conf \\ /etc/kolla/config/{nova,cinder}/ceph.conf cp -r ceph.client.cinder.keyring \\ /etc/kolla/config/nova/ceph.client.cinder.keyring cp -r ceph.client.cinder.keyring \\ /etc/kolla/config/cincer/cinder-volume/ceph.client.cinder.keyring cp -r ceph.client.cinder.keyring \\ /etc/kolla/config/cincer/cinder-backup/ceph.client.cinder-backup.keyring sudo chown -R $USER:$USER /etc/kolla Then copy kolla configuration to /etc/kolla and copy multinode file into current directory\ncp -r share/kolla-ansible/etc_examples/kolla/* /etc/kolla cp -r share/kolla-ansible/ansible/inventory/multinode . Kolla Configuration Adjust inventory multinode file, sometimes like this\n[control] btnlab01con01 btnlab01con02 btnlab01con03 [network] btnlab01con01 btnlab01con02 btnlab01con03 [compute] btnlab01hpv01 btnlab01hpv02 [monitoring] btnlab01con01 btnlab01con02 btnlab01con03 Then validate with ansible ping for all node in inventory multinode\nansible -i multinode all -m ping then adjust /etc/kolla/globals.yml like this\nworkaround_ansible_issue_8743: yes kolla_base_distro: \u0026#34;ubuntu\u0026#34; kolla_install_type: \u0026#34;source\u0026#34; Openstack_release: \u0026#34;2024.1\u0026#34; kolla_internal_vip_address: \u0026#34;10.78.78.200\u0026#34; kolla_internal_fqdn: \u0026#34;os-int\u0026#34; kolla_external_vip_address: \u0026#34;10.78.78.100\u0026#34; kolla_external_fqdn: \u0026#34;os-ext\u0026#34; network_interface: \u0026#34;eth1\u0026#34; tunnel_interface: \u0026#34;eth3\u0026#34; neutron_external_interface: \u0026#34;eth0\u0026#34; neutron_plugin_agent: \u0026#34;ovn\u0026#34; kolla_enable_tls_internal: \u0026#34;yes\u0026#34; kolla_enable_tls_external: \u0026#34;yes\u0026#34; kolla_copy_ca_into_containers: \u0026#34;yes\u0026#34; Openstack_cacert: \u0026#34;/etc/ssl/certs/ca-certificates.crt\u0026#34; kolla_enable_tls_backend: \u0026#34;yes\u0026#34; Openstack_region_name: \u0026#34;Staging\u0026#34; enable_Openstack_core: \u0026#34;yes\u0026#34; enable_haproxy: \u0026#34;yes\u0026#34; enable_mariadb: \u0026#34;yes\u0026#34; enable_memcached: \u0026#34;yes\u0026#34; enable_cinder: \u0026#34;yes\u0026#34; enable_cinder_backup: \u0026#34;yes\u0026#34; enable_mariabackup: \u0026#34;yes\u0026#34; ceph_cinder_user: \u0026#34;cinder\u0026#34; ceph_cinder_keyring: \u0026#34;client.{{ ceph_cinder_user }}.keyring\u0026#34; ceph_cinder_pool_name: \u0026#34;cinder\u0026#34; ceph_cinder_backup_user: \u0026#34;cinder-backup\u0026#34; ceph_cinder_backup_keyring: \u0026#34;client.{{ ceph_cinder_backup_user }}.keyring\u0026#34; ceph_cinder_backup_pool_name: \u0026#34;cinder-backup\u0026#34; ceph_nova_keyring: \u0026#34;{{ ceph_cinder_keyring }}\u0026#34; ceph_nova_user: \u0026#34;{{ ceph_cinder_user }}\u0026#34; ceph_nova_pool_name: \u0026#34;nova\u0026#34; glance_backend_file: \u0026#34;yes\u0026#34; glance_file_datadir_volume: \u0026#34;/data/glance\u0026#34; cinder_backend_ceph: \u0026#34;yes\u0026#34; nova_backend_ceph: \u0026#34;yes\u0026#34; nova_compute_virt_type: \u0026#34;kvm\u0026#34; Generate password for all Openstack service and dependencies\nkolla-genpwd This command will create a new file in /etc/kolla/passwords.yml\nGenerate Openstack certificate with kolla-ansible then append to system host ca-certificate\nkolla-ansible -i multinode certificates cat /etc/kolla/certificates/ca/root.crt | sudo tee -a /etc/ssl/certs/ca-certificates.crt Deploy Openstack Bootstrap servers with kolla deploy dependencies\nkolla-ansible -i ./multinode bootstrap-servers Pull all images for containers (only pulls, no running container changes)\nkolla-ansible -v -i multinode pull Do pre-deployment checks for hosts before deploy\nkolla-ansible -i ./multinode prechecks Deploy and start all kolla containers\nkolla-ansible -i multinode deploy -v Validate generated configuration files of enabled services\nkolla-ansible -i multinode validate-config Post Deploy Openstack Do post deploy\nkolla-ansible -i multinode post-deploy If all goes well there should be no count failed like this Copy admin-openrc.sh to home directory and add Openstack CA Certificate\ncp /etc/kolla/admin-openrc.sh $HOME/admin-openrc.sh echo \u0026#34;export OS_CACERT=/etc/ssl/certs/ca-certificates.crt\u0026#34; \u0026gt;\u0026gt; $HOME/admin-openrc.sh Install Openstack cli client and use admin-openrc.sh credentials for access Openstack cluster\nsudo apt install -y python3-Openstackclient source $HOME/admin-openrc.sh Do some checking commands like\nOpenstack host list Openstack hypervisor list Openstack endpoint list Openstack service list Openstack network agent list Now we can access horizon dashboard via browser https://os-ext.homelab.is-a.dev with credentials we can get from admin-openrc.sh file. Next step we can learn some basic Openstack CLI in the Operational Openstack with Command Line post.\nReferences https://docs.openstack.org/kolla-ansible/2024.2 https://docs.openstack.org/kolla-ansible/2024.2/user/quickstart-development.html https://docs.openstack.org/kolla-ansible/2024.2/user/multinode.html ","permalink":"http://localhost:1313/posts/openstack-kolla-ansible-2024.2/","summary":"\u003ch2 id=\"preparation\"\u003e\u003cem\u003ePreparation\u003c/em\u003e\u003c/h2\u003e\n\u003cp\u003eI used five VM nodes for this home lab project with 16 Cores 16GB Memory and 40GB for the root disk with systems operation \u003cem\u003eUbuntu 22.04.5 LTS\u003c/em\u003e.\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003cem\u003eNode Hostname\u003c/em\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cem\u003eNode Role\u003c/em\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cem\u003evCPU\u003c/em\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cem\u003eMemory\u003c/em\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cem\u003eRootDisk\u003c/em\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cem\u003eManagementNet\u003c/em\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cem\u003eStorageNet\u003c/em\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebtnlab01adm01\u003c/td\u003e\n          \u003ctd\u003eAnsible\u003c/td\u003e\n          \u003ctd\u003e2 Core\u003c/td\u003e\n          \u003ctd\u003e2GB\u003c/td\u003e\n          \u003ctd\u003e20GB\u003c/td\u003e\n          \u003ctd\u003e10.78.78.199\u003c/td\u003e\n          \u003ctd\u003e-\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebtnlab01con01\u003c/td\u003e\n          \u003ctd\u003eController\u003c/td\u003e\n          \u003ctd\u003e16 Core\u003c/td\u003e\n          \u003ctd\u003e16GB\u003c/td\u003e\n          \u003ctd\u003e40GB\u003c/td\u003e\n          \u003ctd\u003e10.78.78.201\u003c/td\u003e\n          \u003ctd\u003e10.79.79.201\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebtnlab01con02\u003c/td\u003e\n          \u003ctd\u003eController\u003c/td\u003e\n          \u003ctd\u003e16 Core\u003c/td\u003e\n          \u003ctd\u003e16GB\u003c/td\u003e\n          \u003ctd\u003e40GB\u003c/td\u003e\n          \u003ctd\u003e10.78.78.202\u003c/td\u003e\n          \u003ctd\u003e10.79.79.202\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebtnlab01con03\u003c/td\u003e\n          \u003ctd\u003eController\u003c/td\u003e\n          \u003ctd\u003e16 Core\u003c/td\u003e\n          \u003ctd\u003e16GB\u003c/td\u003e\n          \u003ctd\u003e40GB\u003c/td\u003e\n          \u003ctd\u003e10.78.78.203\u003c/td\u003e\n          \u003ctd\u003e10.79.79.203\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebtnlab01hpv01\u003c/td\u003e\n          \u003ctd\u003eHypervisor\u003c/td\u003e\n          \u003ctd\u003e32 Core\u003c/td\u003e\n          \u003ctd\u003e32GB\u003c/td\u003e\n          \u003ctd\u003e40GB\u003c/td\u003e\n          \u003ctd\u003e10.78.78.204\u003c/td\u003e\n          \u003ctd\u003e10.79.79.204\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebtnlab01hpv02\u003c/td\u003e\n          \u003ctd\u003eHypervisor\u003c/td\u003e\n          \u003ctd\u003e32 Core\u003c/td\u003e\n          \u003ctd\u003e32GB\u003c/td\u003e\n          \u003ctd\u003e40GB\u003c/td\u003e\n          \u003ctd\u003e10.78.78.205\u003c/td\u003e\n          \u003ctd\u003e10.79.79.205\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eInterface mapping:\u003c/p\u003e","title":"Openstack 2024.2 with Kolla Ansible"},{"content":"Preparation I used three VM nodes for this home lab project with 8 Cores 8GB Memory and 20GB for the root disk with Jumbo Frame in ClusterNet interface with systems operation Rocky Linux 8.10.\nNode Hostname vCPU Memory RootDisk PublicNet ClusterNet btnlab01ceph01 8 Core 8GB 20GB 10.78.78.221 10.79.79.221 btnlab01ceph02 8 Core 8GB 20GB 10.78.78.222 10.79.79.222 btnlab01ceph03 8 Core 8GB 20GB 10.78.78.223 10.79.79.223 Then I added 4 hard drives each with a capacity of 50GB used for OSDs.\nAll operations use the root user, be careful when running commands!\nOptional: Set SElinux to permissive mode for dev environments\nsetenforce 0 sed -i \u0026#39;s/^SELINUX=enforcing$/SELINUX=permissive/\u0026#39; /etc/selinux/config Install packages and dependencies dnf install -y epel-release dnf install -y bash-completion tmux nano htop iftop iotop podman lvm2 Download cephadm binary file and add ceph reef repository CEPH_RELEASE=18.2.0 curl --silent --remote-name --location https://download.ceph.com/rpm-${CEPH_RELEASE}/el9/noarch/cephadm mv cephadm /usr/bin; chmod +x /usr/bin/cephadm cephadm add-repo --release $CEPH_RELEASE Bootstrapping Cluster With cephadm Execute in first node Mapping static hostname in /etc/hosts\ncat \u0026lt;\u0026lt;EOF | tee -a /etc/hosts 10.78.78.221 btnlab01ceph01 btnlab01ceph01.homelab.is-a.dev 10.78.78.222 btnlab01ceph02 btnlab01ceph02.homelab.is-a.dev 10.78.78.223 btnlab01ceph03 btnlab01ceph03.homelab.is-a.dev EOF cephadm install cephadm install ceph-common cephadm bootstrap --mon-ip=10.78.78.221 \\ --skip-mon-network --allow-fqdn-hostname | tee cephadm-bootstrap.log Bootstrap complete success message\nCopy ssh public key to all node\nfor node in btnlab01con0{2..3}; do ssh-copy-id -f -i /etc/ceph/ceph.pub root@$node sleep 2 done After bootstrap finished add ceph public network with following this command.\nceph config set host public_network 10.79.79.0/24 Add another node then adjust placement pgs\nceph orch host add btnlab01ceph02 10.78.78.222 ceph orch host add btnlab01ceph03 10.78.78.223 ceph orch apply mgr --placement=\u0026#34;3 btnlab01ceph01 btnlab01ceph02 btnlab01ceph03\u0026#34; ceph orch apply mon --placement=\u0026#34;btnlab01ceph01,btnlab01ceph02,btnlab01ceph03\u0026#34; Label all node for node in btnlab01ceph0{1..3}; do ceph orch host label add $node mon ceph orch host label add $node mgr ceph orch host label add $node osd done Add osd from all available disk ceph orch apply osd --all-available-devices --method raw ceph orch host ls ceph orch device ls Now We can monitor ceph cluster with ceph -s command\nCreating pool name and ceph keyring for several services Cinder Cinder Backup for pool_name in cinder cinder-backup; do ceph osd pool create $pool_name rbd pool init $pool_name done ceph auth get-or-create client.cinder \\ mon \u0026#39;allow r\u0026#39; osd \u0026#39;allow class-read object_prefix rbd_children, allow rwx pool=cinder, allow rwx pool=nova\u0026#39; \\ -o /etc/ceph/ceph.client.cinder.keyring ceph auth get-or-create client.cinder-backup \\ mon \u0026#39;allow r\u0026#39; osd \u0026#39;allow class-read object_prefix rbd_children, allow rwx pool=cinder-backup\u0026#39; \\ -o /etc/ceph/ceph.client.cinder-backup.keyring We will use this keyring for the openstack cluster that we will create in the Openstack 2024.2 with Kolla Ansible post.\nNow we can access ceph dashboard via browser https://btnlab01ceph01.homelab.is-a.dev:8443 with credentials we can get from bootsrap.\nReferences https://docs.ceph.com/en/reef/cephadm/install https://docs.ceph.com/en/reef/mgr/orchestrator https://docs.ceph.com/en/reef/rados/operations/pools https://docs.ceph.com/en/reef/rados/operations/user-management ","permalink":"http://localhost:1313/posts/ceph-reef-deployment/","summary":"\u003ch2 id=\"preparation\"\u003e\u003cem\u003ePreparation\u003c/em\u003e\u003c/h2\u003e\n\u003cp\u003eI used three VM nodes for this home lab project with 8 Cores 8GB Memory and 20GB for the root disk with \u003ca href=\"https://ceph.io/en/news/blog/2015/ceph-loves-jumbo-frames/\"\u003eJumbo Frame\u003c/a\u003e in ClusterNet interface with systems operation \u003cem\u003eRocky Linux 8.10\u003c/em\u003e.\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003cem\u003eNode Hostname\u003c/em\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cem\u003evCPU\u003c/em\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cem\u003eMemory\u003c/em\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cem\u003eRootDisk\u003c/em\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cem\u003ePublicNet\u003c/em\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cem\u003eClusterNet\u003c/em\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebtnlab01ceph01\u003c/td\u003e\n          \u003ctd\u003e8 Core\u003c/td\u003e\n          \u003ctd\u003e8GB\u003c/td\u003e\n          \u003ctd\u003e20GB\u003c/td\u003e\n          \u003ctd\u003e10.78.78.221\u003c/td\u003e\n          \u003ctd\u003e10.79.79.221\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebtnlab01ceph02\u003c/td\u003e\n          \u003ctd\u003e8 Core\u003c/td\u003e\n          \u003ctd\u003e8GB\u003c/td\u003e\n          \u003ctd\u003e20GB\u003c/td\u003e\n          \u003ctd\u003e10.78.78.222\u003c/td\u003e\n          \u003ctd\u003e10.79.79.222\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebtnlab01ceph03\u003c/td\u003e\n          \u003ctd\u003e8 Core\u003c/td\u003e\n          \u003ctd\u003e8GB\u003c/td\u003e\n          \u003ctd\u003e20GB\u003c/td\u003e\n          \u003ctd\u003e10.78.78.223\u003c/td\u003e\n          \u003ctd\u003e10.79.79.223\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThen I added 4 hard drives each with a capacity of 50GB used for OSDs.\u003c/p\u003e","title":"Ceph Reef Deployment"},{"content":"Installing Packages Dependencies dnf install -y keepalived Keepalived Configuration Keepalived state reference\nMASTER-MASTER (down, back to top priority) MASTER-BACKUP (down, back to MASTER) BACKUP-BACKUP (if down, respect to node with MASTER state) Routers with priority 101 will become MASTER and Routers with priority 100 will become BACKUP. Configure First Node cat \u0026lt;\u0026lt;EOF | tee /etc/keepalived/keepalived.conf global_defs { router_id JumpServer enable_script_security vrrp_check_unicast_src } vrrp_track_process track_openvpn { process openvpn weight 2 } vrrp_instance VIP { state MASTER interface eth1 virtual_router_id 69 priority 101 advert_int 1 nopreempt authentication { auth_type PASS auth_pass Pa\\$\\$w0rd } unicast_src_ip 10.79.80.1 unicast_peer { 10.79.80.2 } virtual_ipaddress { 103.150.80.130/28 dev eth0 10.79.80.254/24 dev eth1 } virtual_routes { 0.0.0.0/0 via 103.150.80.142 dev eth0 metric 100 } static_routes { 0.0.0.0/0 via 10.79.80.251 dev eth1 metric 101 } track_process { track_openvpn } } EOF systemctl restart keepalived; systemctl enable keepalived\nConfigure Second Node cat \u0026lt;\u0026lt;EOF | tee /etc/keepalived/keepalived.conf global_defs { router_id JumpServer enable_script_security vrrp_check_unicast_src } vrrp_track_process track_openvpn { process openvpn weight 2 } vrrp_instance VIP { state BACKUP interface eth1 virtual_router_id 69 priority 100 advert_int 1 authentication { auth_type PASS auth_pass Pa\\$\\$w0rd } unicast_src_ip 10.79.80.2 unicast_peer { 10.79.80.1 } virtual_ipaddress { 104.18.5.103/28 dev eth0 10.79.80.254/24 dev eth1 } virtual_routes { 0.0.0.0/0 via 103.150.80.142 dev eth0 metric 100 } static_routes { 0.0.0.0/0 via 10.79.80.251 dev eth1 metric 101 } track_process { track_openvpn } } EOF systemctl restart keepalived; systemctl enable keepalived\nCustom Health Check If you want to custom script for health check change or adjust this keepalived.conf file.\nvrrp_script healthcheck {\rscript \u0026#34;/bin/bash /etc/keepalived/healthcheck.sh\u0026#34;\ruser root root\rinterval 2\rweight 2\r}\rvrrp_instance VIP {\r...\rtrack_script {\rhealthcheck\r}\r...\r} and create healthcheck.sh bash script like this\n#!/bin/bash TARGET_URL=\u0026#34;https://127.0.0.1:443\u0026#34; USER_AGENT=$(keepalived -v 2\u0026gt;\u0026amp;1 | awk \u0026#39;/Keepalived/ {print $1\u0026#34;/\u0026#34;$2}\u0026#39;) curl --head \\ --silent \\ --insecure \\ --max-time 1 \\ --header \u0026#34;Via: $HOSTNAME\u0026#34; \\ --header \u0026#34;User-Agent: $USER_AGENT\u0026#34; \\ --request GET \u0026#34;$TARGET_URL\u0026#34; -o /dev/null echo \u0026#34;Result code $?\u0026#34; exit $? Also when SELinux is Enforcing, add this module\nsemodule -r keepalived-health-check cat \u0026lt;\u0026lt;EOF | tee keepalived-health-check.te module keepalived-health-check 1.0; require { type shell_exec_t; type keepalived_t; type keepalived_exec_t; type unreserved_port_t; type hostname_exec_t; class file { getattr setattr execute execute_no_trans open read map }; class tcp_socket name_connect; } #============= keepalived_t ============== allow keepalived_t shell_exec_t:file setattr; allow keepalived_t unreserved_port_t:tcp_socket name_connect; allow keepalived_t keepalived_exec_t:file { execute_no_trans open }; allow keepalived_t hostname_exec_t:file { getattr execute execute_no_trans open read }; #!!!! This avc can be allowed using the boolean \u0026#39;domain_can_mmap_files\u0026#39; allow keepalived_t hostname_exec_t:file map; EOF checkmodule -M -m -o keepalived-health-check.mod keepalived-health-check.te semodule_package -o keepalived-health-check.pp -m keepalived-health-check.mod semodule -i keepalived-health-check.pp sealert -a /var/log/audit/audit.log Troubleshooting with keepalived debug\nkeepalived -nldD Reference:\nhttps://www.redhat.com/sysadmin/advanced-keepalived https://access.redhat.com/solutions/3220521 https://manpages.debian.org/testing/keepalived/keepalived.conf.5.en.html https://github.com/sandervanvugt/cka/blob/master/check_apiserver.sh ","permalink":"http://localhost:1313/posts/high-availability-keepalived/","summary":"\u003ch1 id=\"installing-packages-dependencies\"\u003e\u003cstrong\u003eInstalling Packages Dependencies\u003c/strong\u003e\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ednf install -y keepalived\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"keepalived-configuration\"\u003e\u003cstrong\u003eKeepalived Configuration\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003eKeepalived state reference\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMASTER-MASTER (down, back to top priority)\u003c/li\u003e\n\u003cli\u003eMASTER-BACKUP (down, back to MASTER)\u003c/li\u003e\n\u003cli\u003eBACKUP-BACKUP (if down, respect to node with MASTER state)\u003c/li\u003e\n\u003cli\u003eRouters with priority 101 will become MASTER and Routers with priority 100 will become BACKUP.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"configure-first-node\"\u003eConfigure First Node\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;EOF | tee /etc/keepalived/keepalived.conf\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eglobal_defs {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    router_id JumpServer\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    enable_script_security\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    vrrp_check_unicast_src\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003evrrp_track_process track_openvpn {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    process openvpn\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    weight 2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003evrrp_instance VIP {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    state MASTER\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    interface eth1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    virtual_router_id 69\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    priority 101\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    advert_int 1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    nopreempt\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    authentication {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e        auth_type PASS\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e        auth_pass Pa\\$\\$w0rd\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    unicast_src_ip 10.79.80.1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    unicast_peer {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e        10.79.80.2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    virtual_ipaddress {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e        103.150.80.130/28 dev eth0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e        10.79.80.254/24 dev eth1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    virtual_routes {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e        0.0.0.0/0 via 103.150.80.142 dev eth0 metric 100\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    static_routes {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e        0.0.0.0/0 via 10.79.80.251 dev eth1 metric 101\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    track_process {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e        track_openvpn\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eEOF\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003esystemctl restart keepalived; systemctl enable keepalived\u003c/code\u003e\u003c/p\u003e","title":"High Availability with Keepalived"},{"content":"Installing package dependencies dnf install -y epel-release dnf install -y openvpn openssl easy-rsa policycoreutils-python-utils Creating and Setting Up an OpenVPN Server Certificates Set of environment variable for easy_rsa\ncat \u0026lt;\u0026lt;EOF | tee vars set_var EASYRSA_ALGO ec set_var EASYRSA_CURVE prime256v1 set_var EASYRSA_CA_EXPIRE 3650 set_var EASYRSA_CERT_EXPIRE 3650 set_var EASYRSA_CRL_DAYS 3650 EOF Then execute ./easyresa init-pki\nCreate certificate authority (CA) and sever certificate.\nSERVER_CN=jumpserver SERVER_NAME=jumpserver ./easyrsa --batch --req-cn=\u0026#34;$SERVER_CN\u0026#34; build-ca nopass ./easyrsa --batch build-server-full \u0026#34;$SERVER_NAME\u0026#34; nopass ./easyrsa gen-crl Move all the generated files to /etc/openvpn/certdirectory\nmkdir -p /etc/openvpn/cert cp pki/ca.crt \\ pki/crl.pem \\ pki/private/ca.key \\ \u0026#34;pki/issued/$SERVER_NAME.crt\u0026#34; \\ \u0026#34;pki/private/$SERVER_NAME.key\u0026#34; \\ /etc/openvpn/cert Generate tls-crypt key to improve security\nopenvpn --genkey secret /etc/openvpn/server/tls-crypt.key Generate Server Configuration The default server configuration is located /usr/share/doc/openvpn/sample/sample-config-files/server.conf\ncat \u0026lt;\u0026lt;EOF | tee /etc/openvpn/server/server.conf port 1194 proto udp dev tun user nobody group nobody persist-key persist-tun keepalive 10 120 topology subnet server 10.79.83.0 255.255.255.0 push \u0026#34;route 10.79.80.0 255.255.255.0\u0026#34; push \u0026#34;dhcp-option DNS 10.79.80.254\u0026#34; push \u0026#34;dhcp-option DOMAIN lab.tworty.id\u0026#34; client-config-dir /etc/openvpn/client/ccd ifconfig-pool-persist /etc/openvpn/client/persistent-ip.list dh none ecdh-curve prime256v1 auth SHA256 cipher AES-128-GCM data-ciphers AES-128-GCM ca /etc/openvpn/cert/ca.crt cert /etc/openvpn/cert/jumpserver.crt key /etc/openvpn/cert/jumpserver.key crl-verify /etc/openvpn/cert/crl.pem tls-crypt /etc/openvpn/cert/tls-crypt.key tls-server tls-version-min 1.2 tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256 status /var/log/openvpn/status.log log-append /var/log/openvpn/openvpn.log verb 3 EOF Insert duplicate-cn to /etc/openvpn/server/server.conf if you need a multiple vpn connection with same CN. If you are using RHEL, change the group directive from nogroup to nobody to match the distribution’s available groups\nRouting, Kernel and firewall configuration Add routing policy\nnmcli device modify eth1 +ipv4.routes \u0026#34;10.79.83.0/24 10.79.80.254\u0026#34; nmcli connection modify \u0026#39;System eth1\u0026#39; +ipv4.routes \u0026#34;10.79.83.0/24 10.79.80.254\u0026#34; Add kernel parameter for ip forwarding\ncat \u0026lt;\u0026lt;EOF | tee /etc/sysctl.d/ipv4_forward.conf net.ipv4.ip_forward = 1 EOF sysctl -p Add firewall configuration using firewalld\nfirewall-cmd --get-active-zones firewall-cmd --permanent --add-service openvpn firewall-cmd --permanent --zone=internal --add-source=10.79.80.0/22 firewall-cmd --reload or spesific port and protocol with firewall-cmd --permanent --add-port=1194/udp\nSELinux configuration semanage port -a -t openvpn_port_t -p udp 1194 if you have any issue with SElinux policy please use audit sealert -a /var/log/audit/audit.log ausearch -c \u0026#39;openvpn\u0026#39; --raw | audit2allow -M openvpn-custom Generate Client Configuration The default server configuration is located /usr/share/doc/openvpn/sample/sample-config-files/client.conf\nYOUR_IP=$(curl -sL ipinfo.io/ip) cat \u0026lt;\u0026lt;EOF | tee /etc/openvpn/client/client.ovpn client proto udp explicit-exit-notify remote $YOUR_IP 1194 dev tun resolv-retry infinite nobind persist-key persist-tun remote-cert-tls server verify-x509-name jumpserver name auth SHA256 auth-nocache cipher AES-128-GCM tls-client tls-version-min 1.2 tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256 verb 3 EOF Generate Client Certificate CLIENT_NAME=jumpserver-client ./easyrsa --batch build-client-full \u0026#34;$CLIENT_NAME\u0026#34; nopass Insert cerfificate authority file\n{ echo \u0026#34;\u0026lt;ca\u0026gt;\u0026#34; cat /etc/openvpn/cert/ca.crt echo \u0026#34;\u0026lt;/ca\u0026gt;\u0026#34; } | tee -a /etc/openvpn/client/client.ovpn Insert certificate file\n{ echo \u0026#34;\u0026lt;cert\u0026gt;\u0026#34; awk \u0026#39;/BEGIN/,/END/\u0026#39; /etc/openvpn/easy-rsa/3/pki/issued/$CLIENT_NAME.crt echo \u0026#34;\u0026lt;/cert\u0026gt;\u0026#34; } | tee -a /etc/openvpn/client/client.ovpn Insert certificate key file\n{ echo \u0026#34;\u0026lt;key\u0026gt;\u0026#34; cat /etc/openvpn/easy-rsa/3/pki/private/$CLIENT_NAME.key echo \u0026#34;\u0026lt;/key\u0026gt;\u0026#34; } | tee -a /etc/openvpn/client/client.ovpn Insert tls-crypt key file\n{ echo \u0026#34;\u0026lt;tls-crypt\u0026gt;\u0026#34; awk \u0026#39;/BEGIN/,/END/\u0026#39; /etc/openvpn/cert/tls-crypt.key echo \u0026#34;\u0026lt;/tls-crypt\u0026gt;\u0026#34; } | tee -a /etc/openvpn/client/client.ovpn Now you complete generating client config in /etc/openvpn/client/client.ovpn\nSetup logging and logrotate First we create log directory\nmkdir -p /var/log/openvpn Then create logrotation policy\ncat \u0026lt;\u0026lt;EOF | tee /etc/logrotate.d/openvpn /var/log/openvpn/*.log { daily missingok rotate 7 compress delaycompress notifempty create 0640 root root sharedscripts postrotate /bin/systemctl reload openvpn-server@server \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 || true endscript } EOF Make sure logrotate configuration\nlogrotate -d /etc/logrotate.d/openvpn Authentication using Linux PAM and OTP Here is sample SElinux policy for OpenVPN with Google Authenticator\ncat \u0026lt;\u0026lt;EOF | tee openvpn-custom.te module openvpn-custom 1.0; require { type openvpn_t; type user_home_t; type auth_home_t; type user_home_dir_t; class file { create getattr open read rename setattr unlink write }; class dir { read write add_name remove_name }; } #============= openvpn_t ============== # Allow openvpn to access auth_home_t files allow openvpn_t auth_home_t:file { open read unlink }; # Allow openvpn to access user_home_t directories and files allow openvpn_t user_home_dir_t:dir { read write add_name remove_name }; allow openvpn_t user_home_t:dir { read write add_name remove_name }; allow openvpn_t user_home_t:file { create getattr open read rename setattr unlink write }; EOF checkmodule -M -m -o openvpn-custom.mod openvpn-custom.te semodule_package -o openvpn-custom.pp -m openvpn-custom.mod semodule -i openvpn-custom.pp Add context for custom home directory\nsemanage fcontext -a -t auth_home_t /home/lab.tworty.id/[^/]+/\\.google_authenticator semanage fcontext -a -t auth_home_t /home/lab.tworty.id/[^/]+/\\.google_authenticator~ restorecon -rv /home Installing package and setup PAM policy\ndnf install -y google-authenticator qrencode cat \u0026lt;\u0026lt;EOF | tee /etc/pam.d/openvpn auth required pam_google_authenticator.so forward_pass auth include system-auth account include system-auth password include system-auth session include system-auth EOF Replace new server configuration with this values\ncat \u0026lt;\u0026lt;EOF | tee -a /etc/openvpn/server/server.conf port 1194 proto udp dev tun user nobody group nobody persist-key persist-tun keepalive 10 120 topology subnet server 10.79.83.0 255.255.255.0 push \u0026#34;route 10.79.80.0 255.255.255.0\u0026#34; push \u0026#34;dhcp-option DNS 10.79.80.254\u0026#34; push \u0026#34;dhcp-option DOMAIN lab.tworty.id\u0026#34; client-config-dir /etc/openvpn/client/ccd ifconfig-pool-persist /etc/openvpn/client/persistent-ip.list dh none ecdh-curve prime256v1 auth SHA256 cipher AES-128-GCM data-ciphers AES-128-GCM ca /etc/openvpn/cert/ca.crt cert /etc/openvpn/cert/jumpserver.crt key /etc/openvpn/cert/jumpserver.key crl-verify /etc/openvpn/cert/crl.pem tls-crypt /etc/openvpn/cert/tls-crypt.key tls-server tls-version-min 1.2 tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256 status /var/log/openvpn/status.log log-append /var/log/openvpn/openvpn.log plugin /usr/lib64/openvpn/plugins/openvpn-plugin-auth-pam.so openvpn username-as-common-name duplicate-cn reneg-sec 0 verb 3 EOF Update openvpn systemd service file, based on this issue and restart service\ncp -r /usr/lib/systemd/system/openvpn-server@.service /etc/systemd/system sed -i \u0026#39;s/^ProtectHome=true/ProtectHome=false/\u0026#39; /etc/systemd/system/openvpn-server@.service systemctl daemon-reload systemctl restart openvpn-server@server.service Add this configuration to check when create new user or user login must create multi factor authenticator\ncat \u0026lt;\u0026lt;EOF | tee -a /etc/skel/.bashrc if [ ! -f ~/.google_authenticator ]; then echo \u0026#34;Google Authenticator configuration file not found.\u0026#34; echo \u0026#34;Setting up Google Authenticator...\u0026#34; if google-authenticator -t -d -f -r 3 -R 30 -W; then echo \u0026#34;Google Authenticator has been set up successfully. Please scan the QR code using your authenticator app.\u0026#34; else echo \u0026#34;Error generating the QR code. Please check if google-authenticator is installed correctly and try again.\u0026#34; exit 1 fi else echo \u0026#34;Google Authenticator has already been set up.\u0026#34; fi EOF You can test google-authenticator PAM is working or not, you can use pamtester. You need to enter OTP.\ndnf install -y pamtester pamtester openvpn viki authenticate Generate Client Certificate and Client Configuration YOUR_IP=$(curl -s ipinfo.io/ip) CLIENT_NAME=client2fa cat \u0026lt;\u0026lt;EOF | tee /etc/openvpn/client/client2fa.ovpn client proto udp explicit-exit-notify remote $YOUR_IP 1194 dev tun resolv-retry infinite nobind persist-key persist-tun remote-cert-tls server verify-x509-name jumpserver name auth SHA256 auth-nocache auth-user-pass cipher AES-128-GCM tls-client tls-version-min 1.2 tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256 reneg-sec 0 verb 3 EOF cd /etc/openvpn/easy-rsa/3 ./easyrsa --batch build-client-full \u0026#34;$CLIENT_NAME\u0026#34; nopass Insert cerfificate authority file\n{ echo \u0026#34;\u0026lt;ca\u0026gt;\u0026#34; cat /etc/openvpn/server/ca.crt echo \u0026#34;\u0026lt;/ca\u0026gt;\u0026#34; } | tee -a /etc/openvpn/client/client2fa.ovpn Insert certificate file\n{ echo \u0026#34;\u0026lt;cert\u0026gt;\u0026#34; awk \u0026#39;/BEGIN/,/END/\u0026#39; /etc/openvpn/easy-rsa/3/pki/issued/$CLIENT_NAME.crt echo \u0026#34;\u0026lt;/cert\u0026gt;\u0026#34; } | tee -a /etc/openvpn/client/client2fa.ovpn Insert certificate key file\n{ echo \u0026#34;\u0026lt;key\u0026gt;\u0026#34; cat /etc/openvpn/easy-rsa/3/pki/private/$CLIENT_NAME.key echo \u0026#34;\u0026lt;/key\u0026gt;\u0026#34; } | tee -a /etc/openvpn/client/client2fa.ovpn Now you complete generating client config in /etc/openvpn/client/client2fa.ovpn\nClient Set up Sent /etc/openvpn/client/client.ovpn file to the user.\nReferences https://github.com/google/google-authenticator-libpam https://www.digitalocean.com/community/tutorials/how-to-set-up-and-configure-an-openvpn-server-on-centos-8 https://perfecto25.medium.com/openvpn-community-2fa-with-google-authenticator-4f2a7cb08128\n- https://www.ipfire.org/docs/configuration/services/openvpn/extensions/plugins/auth-pam https://build.openvpn.net/doxygen/group__tls__crypt.html#details https://medium.com/@pellabeuf/exploring-diffie-hellman-and-elliptic-curve-diffie-hellman-key-exchange-6b6d882933c2e ","permalink":"http://localhost:1313/posts/linux-openvpn-server/","summary":"\u003ch2 id=\"installing-package-dependencies\"\u003e\u003cem\u003eInstalling package dependencies\u003c/em\u003e\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ednf install -y epel-release\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ednf install -y openvpn openssl easy-rsa policycoreutils-python-utils \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"creating-and-setting-up-an-openvpn-server-certificates\"\u003e\u003cem\u003eCreating and Setting Up an OpenVPN Server Certificates\u003c/em\u003e\u003c/h2\u003e\n\u003cp\u003eSet of environment variable for easy_rsa\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;EOF | tee vars\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eset_var EASYRSA_ALGO ec\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eset_var EASYRSA_CURVE prime256v1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eset_var EASYRSA_CA_EXPIRE 3650\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eset_var EASYRSA_CERT_EXPIRE 3650\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eset_var EASYRSA_CRL_DAYS 3650\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eEOF\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen execute \u003ccode\u003e./easyresa init-pki\u003c/code\u003e\u003cbr\u003e\n\u003cimg alt=\"init-pki\" loading=\"lazy\" src=\"/posts/linux-openvpn-server/uploads/init-pki.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eCreate certificate authority (CA) and sever certificate.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eSERVER_CN\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ejumpserver\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eSERVER_NAME\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ejumpserver\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./easyrsa --batch --req-cn\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$SERVER_CN\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e build-ca nopass\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./easyrsa --batch build-server-full \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$SERVER_NAME\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e nopass\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./easyrsa gen-crl\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"create-ca-cert\" loading=\"lazy\" src=\"/posts/linux-openvpn-server/uploads/create-ca-cert.webp\"\u003e\u003c/p\u003e","title":"Linux OpenVPN Server with Google Authenticators"},{"content":"After we Setup Active Directory Server in Windows Server 2022 now we can use this LDAP/AD User to login to server environments.\nJoin Active Directory and Configure to Login with User AD Installing packages\ndnf install -y realmd oddjob oddjob-mkhomedir sssd adcli samba-common-tools Set dns server to AD server\ncat \u0026lt;\u0026lt;EOF | tee -a /etc/resolv.conf search lab.syslog.id nameserver 10.79.80.3 EOF Discover to AD server\nrealm discover lab.syslog.id Joining linux host to AD server\nrealm join lab.syslog.id -U Administrator Adjust configuration in /etc/sssd/sssd.conf file\n[sssd] domains = lab.syslog.id config_file_version = 2 services = nss, pam [domain/lab.syslog.id] default_shell = /bin/bash krb5_store_password_if_offline = True cache_credentials = True krb5_realm = lab.syslog.id realmd_tags = manages-system joined-with-adcli id_provider = ad fallback_homedir = /home/%d/%u ad_domain = lab.syslog.id use_fully_qualified_names = False ldap_id_mapping = True access_provider = simple then restart it\nsystemctl restart sssd.service Setup sudo config for AD User\ncat \u0026lt;\u0026lt;EOF | tee /etc/sudoers.d/ad-users %administrators ALL=(ALL) ALL %operations\\ team ALL=(ALL) ALL EOF Maybe you can restrics ssh access with adding this configuration\ncat \u0026lt;\u0026lt;EOF | tee -a /etc/ssh/sshd_config Allowgroups administrators \u0026#34;operations team\u0026#34; cloud-admin EOF systemctl restart sshd.service KDC has no support for encryption type issue Cek configuration file in /etc/krb5.conf then adjust this value\ndefault_realm = LAB.SYSLOG.ID default_tgs_enctypes = arcfour-hmac-md5 des-cbc-crc des-cbc-md5 default_tkt_enctypes = arcfour-hmac-md5 des-cbc-crc des-cbc-md5 Reference:\nhttps://docs.redhat.com/en/documentation/red_hat_enterprise_linux/7/html/system-level_authentication_guide/sssd https://discussion.fedoraproject.org/t/kdc-has-no-support-for-encryption-type/77540/3 ","permalink":"http://localhost:1313/posts/linux-join-ad/","summary":"\u003cp\u003eAfter we \u003ca href=\"../setup-active-directory-server\"\u003eSetup Active Directory Server in Windows Server 2022\u003c/a\u003e now we can use this LDAP/AD User to login to server environments.\u003c/p\u003e\n\u003ch2 id=\"join-active-directory-and-configure-to-login-with-user-ad\"\u003eJoin Active Directory and Configure to Login with User AD\u003c/h2\u003e\n\u003cp\u003eInstalling packages\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ednf install -y realmd oddjob oddjob-mkhomedir sssd adcli samba-common-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSet dns server to AD server\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;EOF | tee -a /etc/resolv.conf\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003esearch lab.syslog.id\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003enameserver 10.79.80.3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eEOF\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDiscover to AD server\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erealm discover lab.syslog.id\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"realm-discover\" loading=\"lazy\" src=\"/posts/linux-join-ad/uploads/realm-discover.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eJoining linux host to AD server\u003c/p\u003e","title":"Linux Join Active Directory"},{"content":" This pages is work in progress\nSetup Active Directory Domain Services Setup finish and server will be restart.\nCreate Organizational Unit and Security Group Create User and Assign to Security Group Add a Domain Controller to an Existing Domain Setup finish and server will be restart.\n","permalink":"http://localhost:1313/posts/setup-active-directory-server/","summary":"\u003cblockquote\u003e\n\u003cp\u003eThis pages is work in progress\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"setup-active-directory-domain-services\"\u003eSetup Active Directory Domain Services\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"Step 1\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/1.webp\"\u003e \u003cbr\u003e\n\u003cimg alt=\"Step 2\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/2.webp\"\u003e \u003cbr\u003e\n\u003cimg alt=\"Step 3\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/3.webp\"\u003e \u003cbr\u003e\n\u003cimg alt=\"Step 4\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/4.webp\"\u003e \u003cbr\u003e\n\u003cimg alt=\"Step 5\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/5.webp\"\u003e \u003cbr\u003e\n\u003cimg alt=\"Step 6\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/6.webp\"\u003e \u003cbr\u003e\n\u003cimg alt=\"Step 7\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/7.webp\"\u003e \u003cbr\u003e\n\u003cimg alt=\"Step 8\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/8.webp\"\u003e \u003cbr\u003e\n\u003cimg alt=\"Step 9\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/9.webp\"\u003e \u003cbr\u003e\n\u003cimg alt=\"Step 10\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/10.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eSetup finish and server will be restart.\u003c/p\u003e\n\u003ch2 id=\"create-organizational-unit-and-security-group\"\u003eCreate Organizational Unit and Security Group\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"Step 11\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/11.webp\"\u003e \u003cbr\u003e\n\u003cimg alt=\"Step 12\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/12.webp\"\u003e\u003c/p\u003e\n\u003ch2 id=\"create-user-and-assign-to-security-group\"\u003eCreate User and Assign to Security Group\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"Step 13\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/13.webp\"\u003e \u003cbr\u003e\n\u003cimg alt=\"Step 14\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/14.webp\"\u003e\u003c/p\u003e\n\u003ch2 id=\"add-a-domain-controller-to-an-existing-domain\"\u003eAdd a Domain Controller to an Existing Domain\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"Step 15\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/15.webp\"\u003e\u003cbr\u003e\n\u003cimg alt=\"Step 16\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/16.webp\"\u003e\u003cbr\u003e\n\u003cimg alt=\"Step 17\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/17.webp\"\u003e\u003cbr\u003e\n\u003cimg alt=\"Step 18\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/18.webp\"\u003e\u003cbr\u003e\n\u003cimg alt=\"Step 19\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/19.webp\"\u003e\u003cbr\u003e\n\u003cimg alt=\"Step 20\" loading=\"lazy\" src=\"/posts/setup-active-directory-server/uploads/20.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eSetup finish and server will be restart.\u003c/p\u003e","title":"Setup Active Directory Server with Windows Server 2022"},{"content":"Configure Linux NAT Forwarding Enable kernel parameter\necho \u0026#39;net.ipv4.ip_forward = 1\u0026#39; \u0026gt; /etc/sysctl.d/99-forwarding.conf sysctl --system Setup firewalld configuration\nnmcli connection migrate nmcli connection modify eth0 connection.zone public nmcli device modify eth0 connection.zone public nmcli connection modify eth1 connection.zone internal nmcli device modify eth1 connection.zone internal firewall-cmd --permanent --zone=public --add-masquerade firewall-cmd --permanent --new-policy NAT-int-to-ext firewall-cmd --permanent --policy NAT-int-to-ext --add-ingress-zone internal firewall-cmd --permanent --policy NAT-int-to-ext --add-egress-zone public firewall-cmd --permanent --policy NAT-int-to-ext --set-target ACCEPT firewall-cmd --reload Special case for Proxmox Virtual Environment\nauto vmbr0 iface vmbr0 inet manual bridge-ports eth0 bridge-stp off bridge-fd 0 post-up echo 1 \u0026gt; /proc/sys/net/ipv4/conf/vmbr0/forwarding post-down echo 0 \u0026gt; /proc/sys/net/ipv4/conf/vmbr0/forwarding #Public Network Configure linux simple DNS server for lab purposes Installing package dependencies\ndnf install -y dnsmasq Setup dnsmasq upstream forward server\ncat \u0026lt;\u0026lt;EOF | tee -a /etc/dnsmasq.conf server=1.1.1.1 server=1.0.0.1 EOF Setup dnsmasq to rewrite dns request\ncat \u0026lt;\u0026lt;EOF | tee /etc/dnsmasq.d/lab.tworty.id.conf address=/tworty.id/10.79.80.3 cname=blog.tworty.id,tworty.id EOF References https://wiki.archlinux.org/title/Firewalld#NAT_masquerade https://serverfault.com/questions/1005682/proxmox-ipv4-inward-routing-not-working ","permalink":"http://localhost:1313/posts/linux-networking/","summary":"\u003ch2 id=\"configure-linux-nat-forwarding\"\u003e\u003cem\u003eConfigure Linux NAT Forwarding\u003c/em\u003e\u003c/h2\u003e\n\u003cp\u003eEnable kernel parameter\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;net.ipv4.ip_forward = 1\u0026#39;\u003c/span\u003e \u0026gt; /etc/sysctl.d/99-forwarding.conf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esysctl --system\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSetup firewalld configuration\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enmcli connection migrate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enmcli connection modify eth0 connection.zone public\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enmcli device modify eth0 connection.zone public\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enmcli connection modify eth1 connection.zone internal\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enmcli device modify eth1 connection.zone internal\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efirewall-cmd --permanent --zone\u003cspan class=\"o\"\u003e=\u003c/span\u003epublic --add-masquerade\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efirewall-cmd --permanent --new-policy NAT-int-to-ext\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efirewall-cmd --permanent --policy NAT-int-to-ext --add-ingress-zone internal\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efirewall-cmd --permanent --policy NAT-int-to-ext --add-egress-zone public\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efirewall-cmd --permanent --policy NAT-int-to-ext --set-target ACCEPT\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efirewall-cmd --reload\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSpecial case for Proxmox Virtual Environment\u003c/p\u003e","title":"Linux Networking"},{"content":"Expand Space without Rebooting VM Current usage disk with lsblk command And here is LVM partition table\nFirst step we need grow partition in /dev/sda3, install package growpart first\ndnf install -y cloud-utils-growpart Then we resize partition with this command\ngrowpart /dev/sda 3 See the different before and after, if you don\u0026rsquo;t use LVM partition scheme just execute resize2fs /dev/sda3 to full fill the partition.\npvresize /dev/sda3 pvs vgs Now you\u0026rsquo;re ready to extent the LVM partition\nlvresize --extents +100%FREE --resizefs /dev/vg0/root If you just resize partition only 20%, this sample command\nlvresize --size +20G --resizefs /dev/vg0/root Expand Space without Rebooting VM in ESXi Guest Host Re-scan the SCSI Bus to Add a SCSI Device Without rebooting the VM using the following command\nFirst, check the name(s) of your scsi devices.\nls /sys/class/scsi_device/ Then rescan the scsi bus. Below you can replace the \u0026lsquo;0\\:0\\:0\\:0′ with the actual scsi bus name found with the previous command. Each colon is prefixed with a slash, which is what makes it look weird.\necho 1 \u0026gt; /sys/class/scsi_device/0\\:0\\:0\\:0/device/rescan References https://access.redhat.com/solutions/5540131 https://www.redhat.com/sysadmin/resize-lvm-simple https://communities.vmware.com/t5/vSphere-Hypervisor-Discussions/Expand-Space-without-Rebooting-VM/td-p/923809 ","permalink":"http://localhost:1313/posts/linux-resize-disk/","summary":"\u003ch2 id=\"expand-space-without-rebooting-vm\"\u003e\u003cem\u003eExpand Space without Rebooting VM\u003c/em\u003e\u003c/h2\u003e\n\u003cp\u003eCurrent usage disk with \u003ccode\u003elsblk\u003c/code\u003e command\n\u003cimg alt=\"disk-overview\" loading=\"lazy\" src=\"/posts/linux-resize-disk/uploads/disk-overview.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eAnd here is LVM partition table\u003cbr\u003e\n\u003cimg alt=\"lvm-overview\" loading=\"lazy\" src=\"/posts/linux-resize-disk/uploads/lvm-overview.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eFirst step we need grow partition in \u003ccode\u003e/dev/sda3\u003c/code\u003e, install package growpart first\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ednf install -y cloud-utils-growpart\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen we resize partition with this command\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egrowpart /dev/sda \u003cspan class=\"m\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"growpart-result\" loading=\"lazy\" src=\"/posts/linux-resize-disk/uploads/growpart-result.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eSee the different before and after, if you don\u0026rsquo;t use LVM partition scheme just execute \u003ccode\u003eresize2fs /dev/sda3\u003c/code\u003e to full fill the partition.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epvresize /dev/sda3\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epvs\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003evgs\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"pvresize-result\" loading=\"lazy\" src=\"/posts/linux-resize-disk/uploads/pvresize-result.webp\"\u003e\u003c/p\u003e","title":"Linux Resize Disk"},{"content":"Hi, 👋\nMy name is Berto Viki Satria Pranata, also known as Viki Pranata for short. I am a dedicated IT professional with experience in Information Technology since 2015, specializing in systems administration, cloud engineering, and IT architecture. I am skilled in managing complex IT infrastructures and implementing solutions with many technology stacks, Utilizing various automation tools and best practices in production environments.\nTo view my full profile, please connect with me on LinkedIn.\nJob Experience PT Maxindo Mitra Solusi, Technical Support, 2015 - 2018 PT Maxindo Mitra Solusi, Systems Administrator, 2018 - 2022 PT Boer Technology (Btech), Cloud Engineer, 2022 - 2023 PT Biznet Gio Nusantara, Systems Operations Engineer, 2023 - 2024 PT Biznet Gio Nusantara, IT Architecture Engineer, 2024 - now Achievment Certified Kubernetes Administrator, issued on 10 January 2023 Certified OpenStack Administrator, issued on 12 January 2023 Mikrotik Certified Network Associate, issued on 20 July 2023 Training Coursera, Google Cloud Platform Fundamentals: Core Infrastructure, 21 June 2020 Coursera, Essential Cloud Infrastructure: Foundation, 06 July 2020 Digital Talent Scholarship - Kominfo, PROA - Container, Kubernetes \u0026amp; OpenShift, 30 April 2021 Adinusa, Linux System Administration, 08 July 2021 Adinusa, Docker For DevOps, 26 July 2021 Adinusa, Ansible Administration, 10 August 2021 Adinusa, Kubernetes Administration, 18 August 2021 Adinusa, Ceph Administration, 23 August 2021 Adinusa, OpenStack Administration, 31 August 2021 Dicoding, Belajar Dasar-Dasar DevOps, 23 January 2023 Dicoding, Belajar Jaringan Komputer untuk Pemula, 24 January 2023 Dicoding, Cloud Practitioner Essentials (Belajar Dasar AWS Cloud), 07 Maret 2023 Dicoding, Menjadi Linux System Administrator, 28 August 2023 Dicoding, Belajar Implementasi CI/CD, 31 August 2023 ","permalink":"http://localhost:1313/about/","summary":"\u003cp\u003eHi, 👋\u003cbr\u003e\nMy name is Berto Viki Satria Pranata, also known as Viki Pranata for short. I am a dedicated IT professional with experience in Information Technology since 2015, specializing in systems administration, cloud engineering, and IT architecture. I am skilled in managing complex IT infrastructures and implementing solutions with many technology stacks, Utilizing various automation tools and best practices in production environments.\u003cbr\u003e\nTo view my full profile, please connect with me on \u003ca href=\"https://www.linkedin.com/in/vikipranata\"\u003eLinkedIn\u003c/a\u003e.\u003c/p\u003e","title":"About me"}]